#!/bin/bash
set -e

if [ $# -eq 0 ]; then
  echo "No arguments provided to jcd-new classlib. Displaying help."
  bash "$JCD_NEW_LIBS/jcd-new-help-classlib"
  exit 1
fi

for i in $*; do
  case $i in
    -p=*|--project=*|--project-name=*)
      echo "found project name parameter"
      export PROJECT_NAME="${i#*=}"
      shift # past argument=value
      ;;
    -ngh|--no-github)
      echo "found NO_GITHUB flag"
      export NO_GITHUB=1
      shift # past argument
      ;;
    -nsv=*|--netstandard-version=*)
      echo "found NETSTANDARD_VERSION parameter"
      export NETSTANDARD_VERSION="${i#*=}"
      shift # past argument
      ;;
    --version)
      exec "$JCD_NEW_LIBS/jcd-new-version"
      exit 0
      ;;
    *)
      # ignore unknown option
      echo "Ignoring unrecognized parameter: $i"
      shift # past unknown option
      ;;
  esac
done

abort_on_missing_variable PROJECT_NAME "ABORTING: No project name specified. Please use -p=, --project=, or --project-name= to specify the project name."

validate_netstandard_version "$NETSTANDARD_VERSION"

abort_on_missing_variable NETSTANDARD_VERSION

abort_on_missing_variable FULL_NAME "Cannot process $JCD_NEW_TEMPLATES/LICENSE.template without it." true

abort_on_missing_variable GITHUB_USER_NAME "Cannot process various GitHub integrations without it." true

#validate that $github has been set and the directory exists
abort_on_missing_variable github
if [ ! -d "$github" ]; then
  echo "ABORTING: \$github defined, but the directory it points to doesn't exist: $github"
  exit 1;
fi

abort_on_missing_variable GITHUB_TOKEN

abort_on_missing_variable GITHUB_USER_NAME

abort_on_missing_gh

abort_on_missing_dotnet

# capture some data
export YEAR=$(date +'%Y')

pushd "$github"

#Verify the project doesn't already exist
if [ -d "./$PROJECT_NAME" ]
  then echo "Cannot create new project: directory already exists."
  exit 1;
fi

create_sln "$PROJECT_NAME"
# now move into the newly created solution folder. This will be out repository root too.
cd "./$PROJECT_NAME" #TODO: figure out why I didn't do a pushd/popd pair for this directory...

# initialize the git repository.
init_git

# append common git ignores to our default .gitignore
echo "Building initial .gitignore"
append_gitignore "Global/JetBrains.gitignore"
append_gitignore "VisualStudio.gitignore"
append_gitignore "Global/VisualStudioCode.gitignore"

echo "Creating README.md"
export NETSTANDARD_VERSION
process_template "$JCD_NEW_TEMPLATES/classlib/README.md.template" "./README.md"

process_dot_github_templates "$JCD_NEW_TEMPLATES"

echo "Creating LICENSE"
process_template "$JCD_NEW_TEMPLATES/LICENSE.template" "./LICENSE"

dotnet new nugetconfig

create_netstandard21_classlib "$PROJECT_NAME"
dotnet sln add "$PROJECT_NAME/$PROJECT_NAME.csproj"

create_xunit_tests "$PROJECT_NAME"
dotnet sln add "$PROJECT_NAME.Tests/$PROJECT_NAME.Tests.csproj"

create_examples_project "$PROJECT_NAME"
dotnet sln add "$PROJECT_NAME.Examples/$PROJECT_NAME.Examples.csproj"

# Set netstandard version. Add README.md, nuget.config and LICENSE to library .csproj file

# Yes, this is currently an ugly hack. The command line tools don't allow for setting the netstandard version
# and adding non-project folder non-compilable files wasn't as straight forward as the documentation seemed.
# Since both required editing the project file I decided to do both at once with this simple
# set of sed scripts. Yes. I'll need to eventually find a better way. Maybe I'll make a dotnet tool
# that edits the project file in a simpler to use fashion and allows for changing the netstandard
# down to 1.0.
sed -i "s/<TargetFramework>netstandard2.1<\/TargetFramework>/<TargetFramework>netstandard$NETSTANDARD_VERSION<\/TargetFramework>\n    <LangVersion>8<\/LangVersion>/" "$PROJECT_NAME/$PROJECT_NAME.csproj"
sed -i 's/<\/Project>//' "$PROJECT_NAME/$PROJECT_NAME.csproj"
echo "
    <PropertyGroup>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <Title>$PROJECT_NAME</Title>
        <Authors>$FULL_NAME</Authors>
        <Description>A short description goes here.</Description>
        <Copyright>$YEAR</Copyright>
        <PackageProjectUrl>https://github.com/$GITHUB_USER_NAME/$PROJECT_NAME</PackageProjectUrl>
        <PackageLicenseUrl>https://github.com/$GITHUB_USER_NAME/$PROJECT_NAME/blob/main/LICENSE</PackageLicenseUrl>
        <RepositoryUrl>https://github.com/$GITHUB_USER_NAME/$PROJECT_NAME</RepositoryUrl>
        <RepositoryType>GitHub</RepositoryType>
        <PackageVersion>0.0.1</PackageVersion>
        <AssemblyVersion>0.0.1</AssemblyVersion>
        <FileVersion>0.0.1</FileVersion>
        <TargetFramework>netstandard$NETSTANDARD_VERSION</TargetFramework>
        <PackageIconUrl>https://s.gravatar.com/avatar/c7e8df18f543ea857ac93660a190df98?s=320</PackageIconUrl>
        <PackageReleaseNotes></PackageReleaseNotes>
    </PropertyGroup>

    <PropertyGroup>
      <PackageReadmeFile>README.md</PackageReadmeFile>
    </PropertyGroup>

    <ItemGroup>
      <None Include=\"..\\README.md\" Pack=\"true\" PackagePath=\"\\\" />
      <None Include=\"..\\LICENSE\" Pack=\"false\" PackagePath=\"\\\" />
      <None Include=\"..\\nuget.config\" Pack=\"false\" PackagePath=\"\\\" />
    </ItemGroup>

    <PropertyGroup Condition=\" '\$(Configuration)' == 'Debug' \">
      <DocumentationFile>..\\docs\\$PROJECT_NAME.xml</DocumentationFile>
    </PropertyGroup>

    <PropertyGroup Condition=\" '\$(Configuration)' == 'Release' \">
      <DocumentationFile>..\\docs\\$PROJECT_NAME.xml</DocumentationFile>
    </PropertyGroup>

</Project>
" >> "$PROJECT_NAME/$PROJECT_NAME.csproj"

pushd "$PROJECT_NAME"

echo "Creating NamespaceDoc class with summary comments."
process_template "$JCD_NEW_TEMPLATES/classlib/NamespaceDoc.cs.template" "NamespaceDoc.cs"

echo "Creating Class1 class with summary comments."
process_template "$JCD_NEW_TEMPLATES/classlib/Class1.cs.template" "Class1.cs"

popd

echo "Performing initial build of $PROJECT_NAME to generate documentation stub."
dotnet build

git add .
git commit -m ".NET Standard $NETSTANDARD_VERSION project created with jcd-new classlib"

echo "Setting main branch name"
git branch -M main

if [ "$NO_GITHUB" == "1" ]
then
  echo "--no-github specified. Skipping push to github."
  popd
  exit 0
fi

echo "Creating the github repository and pushing."
# Create the github repo and do the initial push
gh auth login --hostname github.com || true
gh repo create "$GITHUB_USER_NAME/$PROJECT_NAME" --public --gitignore= --license= -y || true
git remote add origin "https://github.com/$GITHUB_USER_NAME/$PROJECT_NAME.git"
git push -u origin main || true

# always pop the directory as a final step before exiting.
popd
exit 0
