#!/bin/bash
set -e

if [ $# -eq 0 ]; then
  echo "No arguments provided to jcd-new classlib. Displaying help."
  bash "$JCD_NEW_LIBS/jcd-new-help-classlib"
  exit 1
fi

for i in "$@"; do
  case $i in
    -p=*|--project=*|--project-name=*)
      echo "found project name parameter"
      export PROJECT_NAME="${i#*=}"
      shift # past argument=value
      ;;
    -ngh|--no-github)
      echo "found --no-github flag"
      export NO_GITHUB=1
      shift # past argument
      ;;
    -nc|--no-commit)
      echo "found --no-commit flag"
      export NO_GITHUB=1
      export NO_COMMIT=1
      shift # past argument
      ;;
    -nsv=*|--netstandard-version=*)
      echo "found NETSTANDARD_VERSION parameter"
      export NETSTANDARD_VERSION="${i#*=}"
      shift # past argument
      ;;
    -f=*|--framework=*)
      echo "found TARGET_FRAMEWORK parameter"
      export TARGET_FRAMEWORK="${i#*=}"
      shift # past argument
      ;;
    -lic=*|--license=*)
      LICENSE="${i#*=}"
      ;;
    --version)
      exec "$JCD_NEW_LIBS/jcd-new-version"
      exit 0
      ;;
    *)
      # ignore unknown option
      echo "Ignoring unrecognized parameter: $i"
      shift # past unknown option
      ;;
  esac
done

select_license_template "$LICENSE"

abort_on_missing_variable PROJECT_NAME "ABORTING: No project name specified. Please use -p=, --project=, or --project-name= to specify the project name."

if [[ "$TARGET_FRAMEWORK" != "" && "$NETSTANDARD_VERSION" != "" ]]; then
  echo "You must specify either --netstandard-version= or --framework= , but not both"
  exit 1
fi

if [[ "$TARGET_FRAMEWORK" != "" ]]; then
  validate_target_framework_version "$TARGET_FRAMEWORK"
else
  validate_netstandard_version "$NETSTANDARD_VERSION"
  abort_on_missing_variable NETSTANDARD_VERSION
fi

abort_on_missing_variable TARGET_FRAMEWORK

abort_on_missing_variable FULL_NAME "Cannot process $JCD_NEW_TEMPLATES/LICENSE.template without it." true

abort_on_missing_variable GITHUB_USER_NAME "Cannot process various GitHub integrations without it." true

#validate that $github has been set and the directory exists
abort_on_missing_variable github
#expand tilde to the contents of $HOME for maximum portability. (Debian 11 on WSL2 doesn't properly expand during the check below)
export github="${github/#\~/$HOME}"
if [ ! -d "$github" ]; then
  echo "ABORTING: \$github defined, but the directory it points to doesn't exist: $github"
  exit 1;
fi

warn_on_variable_set GITHUB_TOKEN "Using a token in your environment is a security risk. Please remove it, then login to gh-cli from the command line when prompted." true

abort_on_missing_variable GITHUB_USER_NAME

abort_on_missing_gh

abort_on_missing_dotnet

# capture some data
YEAR=$(date +'%Y')
export YEAR

pushd "$github"

#Verify the project doesn't already exist
if [ -d "./$PROJECT_NAME" ]
  then echo "Cannot create new project: directory already exists."
  exit 1;
fi

create_sln "$PROJECT_NAME"
# now move into the newly created solution folder. This will be out repository root too.
cd "./$PROJECT_NAME" #TODO: figure out why I didn't do a pushd/popd pair for this directory...

# initialize the git repository.
init_git

# append common git ignores to our default .gitignore
echo "Building initial .gitignore"
append_gitignore "Global/JetBrains.gitignore"
append_gitignore "VisualStudio.gitignore"
append_gitignore "Global/VisualStudioCode.gitignore"

export NETSTANDARD_VERSION
echo "Creating README.md"
process_template "$JCD_NEW_TEMPLATES/classlib/README.md.template" "./README.md"

process_dot_github_templates "$JCD_NEW_TEMPLATES"

echo "Creating LICENSE file"
process_template "$LICENSE_TEMPLATE" "./LICENSE"

dotnet new nugetconfig

create_netstandard21_classlib "$PROJECT_NAME"
dotnet sln add "$PROJECT_NAME/$PROJECT_NAME.csproj"

create_xunit_tests "$PROJECT_NAME"
dotnet sln add "$PROJECT_NAME.Tests/$PROJECT_NAME.Tests.csproj"

create_examples_project "$PROJECT_NAME"
dotnet sln add "$PROJECT_NAME.Examples/$PROJECT_NAME.Examples.csproj"

# Set netstandard/framework version. Add README.md, nuget.config and LICENSE to library .csproj file

set_target_framework_version_and_connect_project_README_and_LICENSE_files

pushd "$PROJECT_NAME"

echo "Creating NamespaceDoc class with summary comments."
process_template "$JCD_NEW_TEMPLATES/classlib/NamespaceDoc.cs.template" "NamespaceDoc.cs"

echo "Creating Class1 class with summary comments."
process_template "$JCD_NEW_TEMPLATES/classlib/Class1.cs.template" "Class1.cs"

popd

echo "Performing initial build of $PROJECT_NAME to generate documentation stubs."
dotnet build

if [ "$NO_COMMIT" == "1" ]
then
  echo "--no-commit specified. Skipping initial commit to Git repository."
else
  perform_initial_commit_and_set_branch_name_to_main ".NET Standard $NETSTANDARD_VERSION project created with jcd-new classlib"
fi

if [ "$NO_GITHUB" == "1" ]
then
  echo "--no-github specified. Skipping GitHub repository creation and initial push."
else
  create_github_repo_and_push
fi

# always pop the directory as a final step before exiting.
popd
exit 0